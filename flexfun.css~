/**
* Usefull info
* https://css-tricks.com/snippets/css/a-guide-to-flexbox/
*/

/* === Helper classes === */
/* Used to see whereabouts of an elements and to distinguish from other elements */
.red {
  background: red; }

.blue {
  background: blue; }

.green {
  background: green; }

/* Make padding grow on the inside */
.box {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

/* Handy. And using this with flex-*-1 gives other results than space-around */
.text-center {
  text-align: center; }

/* === FlexFun begins === */
/* Remember to set .flexfun on HTML, body or whereever you want to contain the effects */

/* class="flex" */
.flexfun .flex {
  display: flex; }

/* class="flex flow-row", class="flex flow-col"
* Choose if you want your object to go from left to right OR top to bottom
*/
.flexfun .flex.flow-row {
  flex-direction: row; }
.flexfun .flex.flow-col {
  flex-direction: column; }

/* class="flex wrap", class="flex nowrap"
* Choose wrap when you want rows to break and jump to the next line, same with column
*/
.flexfun .flex.wrap {
  flex-wrap: wrap; }
.flexfun .flex.nowrap {
  flex-wrap: nowrap; }

/* class="flex space-around", class="flex space-between"
* When you want the children to have the same space. `Around` adds margins on each side of the row.
*/
.flexfun .flex.space-around {
  justify-content: space-around; }
.flexfun .flex.space-between {
  justify-content: space-between; }

/* class="flex center-hor", class="flex hor-start", class="flex hor-end"
* Horizontel: Center children, make them float to the left(start) or to the right(end)
*/
.flexfun .flex.hor-center {
  justify-content: center; }
.flexfun .flex.hor-start {
  justify-content: flex-start; }
.flexfun .flex.hor-end {
  justify-content: flex-end; }

/* class="flex center-ver", class="flex ver-start", class="flex ver-end"
* Vertical: Center children, make them float to the left(start) or to the right(end)
*/
.flexfun .flex.ver-center {
  align-items: center; }
.flexfun .flex.ver-start {
  align-items: flex-start; }
.flexfun .flex.ver-end {
  align-items: center; }

/* class="flex rows-center", class="flex rows-start", class="rows-end"
* Vertical: This is tricky because it reminds of align-items
* Scenario: div.flex with 3 children in a row with wrap. First child has max width, 2 others have 50%
*
* ++++++++++++++++++++
* +                  +
* ++++++++++++++++++++
* +        ++        +
* ++++++++++++++++++++
*
* Like this, but if you are to set the parents width to e.g. 100vh, the children will stretch to fill
* the remaining space. And if you set height on e.g. the first child(topbar) to 80px, a huge gap of
* space(nothingness) will fill the old space of the first div.
* 
* This is where you need flex-start(class="flex rows-start"), then they will act "normal".
*/
.flexfun .flex.rows-center {
  align-content: flex-end; }
.flexfun .flex.rows-start {
  align-content: flex-start; }
.flexfun .flex.rows-end {
  align-content: flex-end; }

/* class="flex child-1", class="flex flex-max"
* Child-1 is handy if you have to set 100 children to use "flex: 1" at the same time.
* Flex-max is to set a child to 100% in a flex-parent. Best used with `wrap`.
*/
.flexfun .flex.child-1 > * {
  flex: 1; }
.flexfun .flex-max {
  flex: 1 100%; }

/* === Bootstrap wannabe === */
/* class="flex-xs-1"
* Same concept as Bootstrap, but these changes width depending on how many flex being used.
* Also if you wish for them to break a row, remember to use row and to set min-width.
* Or else it depends on the content.
*
* Set ONLY flex-xs-1 if you want it to have "flex: 1;" on all screens.
*/
@media(min-width: 0) {
  .flexfun .flex-xs-1 {
    flex: 1; }
  .flexfun .flex-xs-2 {
    flex: 2; }
  .flexfun .flex-xs-3 {
    flex: 3; }
  .flexfun .flex-xs-4 {
    flex: 4; }
  .flexfun .flex-xs-5 {
    flex: 5; }
  .flexfun .flex-xs-6 {
    flex: 6; }
  .flexfun .flex-xs-7 {
    flex: 7; }
  .flexfun .flex-xs-8 {
    flex: 8; }
  .flexfun .flex-xs-9 {
    flex: 9; }
  .flexfun .flex-xs-10 {
    flex: 10; }
  .flexfun .flex-xs-11 {
    flex: 11; }
  .flexfun .flex-xs-12 {
    flex: 12; } }
@media(min-width: 48em) {
  .flexfun .flex-sm-1 {
    flex: 1; }
  .flexfun .flex-sm-2 {
    flex: 2; }
  .flexfun .flex-sm-3 {
    flex: 3; }
  .flexfun .flex-sm-4 {
    flex: 4; }
  .flexfun .flex-sm-5 {
    flex: 5; }
  .flexfun .flex-sm-6 {
    flex: 6; }
  .flexfun .flex-sm-7 {
    flex: 7; }
  .flexfun .flex-sm-8 {
    flex: 8; }
  .flexfun .flex-sm-9 {
    flex: 9; }
  .flexfun .flex-sm-10 {
    flex: 10; }
  .flexfun .flex-sm-11 {
    flex: 11; }
  .flexfun .flex-sm-12 {
    flex: 12; } }
@media(min-width: 62em) {
  .flexfun .flex-md-1 {
    flex: 1; }
  .flexfun .flex-md-2 {
    flex: 2; }
  .flexfun .flex-md-3 {
    flex: 3; }
  .flexfun .flex-md-4 {
    flex: 4; }
  .flexfun .flex-md-5 {
    flex: 5; }
  .flexfun .flex-md-6 {
    flex: 6; }
  .flexfun .flex-md-7 {
    flex: 7; }
  .flexfun .flex-md-8 {
    flex: 8; }
  .flexfun .flex-md-9 {
    flex: 9; }
  .flexfun .flex-md-10 {
    flex: 10; }
  .flexfun .flex-md-11 {
    flex: 11; }
  .flexfun .flex-md-12 {
    flex: 12; } }
@media(min-width: 75em) {
  .flexfun .flex-lg-1 {
    flex: 1; }
  .flexfun .flex-lg-2 {
    flex: 2; }
  .flexfun .flex-lg-3 {
    flex: 3; }
  .flexfun .flex-lg-4 {
    flex: 4; }
  .flexfun .flex-lg-5 {
    flex: 5; }
  .flexfun .flex-lg-6 {
    flex: 6; }
  .flexfun .flex-lg-7 {
    flex: 7; }
  .flexfun .flex-lg-8 {
    flex: 8; }
  .flexfun .flex-lg-9 {
    flex: 9; }
  .flexfun .flex-lg-10 {
    flex: 10; }
  .flexfun .flex-lg-11 {
    flex: 11; }
  .flexfun .flex-lg-12 {
    flex: 12; } }
